View(data)
data2<-data%>%arrange(year_id,date,regional_id)
O_array <- array(data2$casos, dim = c(N, t, w))  # Convert to array form
O_array[1,1,1]
O_array[1,1,2]
O_array[2,1,1]
View(data2$casos)
data2$casos
O_array[1,1,2]
O_vector <- as.vector(O_array)  # Flatten the array into a vector
O_vector
O_array[1,1,1]
O_array[1,,]
O_array[1,1,]
data2<-data%>%arrange(date,year_id,regional_id)
O_array <- array(data2$casos, dim = c(N, t, w))  # Convert to array form
O_array[1,1,]
data2<-data%>%arrange(date,regional_id,year_id)
O_array <- array(data2$casos, dim = c(N, t, w))  # Convert to array form
O_array[1,1,]
data2<-data%>%arrange(date,regional_id)
O_array <- array(data2$casos, dim = c(N, t, w))  # Convert to array form
O_array[1,1,]
data2<-data%>%arrange(regional_id,year_id)
O_array <- array(data2$casos, dim = c(N, t, w))  # Convert to array form
O_array[1,1,]
O_array <- array(data2$casos, dim = c(N, t, w),byrow=TRUE)  # Convert to array form
O_array <- array(NA, dim = c(N, t, w))  # Convert to array form
O_array <- array(NA, dim = c(N, t, w))  # Convert to array form
O_array <- array(NA, dim = c(N, t, w))  # Convert to array form
for (i in 1:N) {  # Loop over spatial units
for (k in 1:t) { # Loop over years
for (j in 1:w) {O_array[i,k,j]<- data$cases[N*t*w]}}}
O_array <- array(NA, dim = c(N, t, w))  # Convert to array form
for (i in 1:N) {  # Loop over spatial units
for (k in 1:t) { # Loop over years
for (j in 1:w) {O_array[i,k,j]<- data$cases[i*k*j]}}}
i<-1
j<-1
j<-1
O_array <- array(NA, dim = c(N, t, w))  # Convert to array form
N<-1
t<-1
w<-1
O_array <- array(NA, dim = c(N, t, w))  # Convert to array form
for (i in 1:N) {  # Loop over spatial units
for (k in 1:t) { # Loop over years
for (j in 1:w) {O_array[i,k,j]<- data$cases[i*k*j]}}}
N
O_array[i,k,j]
data$cases[i*k*j]
j
k
i
data$cases[i*k*j]
O_array <- array(NA, dim = c(N, t, w))  # Convert to array form
for (i in 1:N) {  # Loop over spatial units
for (k in 1:t) { # Loop over years
for (j in 1:w) {O_array[i,k,j]<- data$casos[i*k*j]}}}
O_array[1,1,2]
O_array
# DIMENSION
N <- length(unique(data$regional_id))
t <- length(unique(data$year_id))
w <- length(unique(data$week_id))
O_array <- array(NA, dim = c(N, t, w))  # Convert to array form
for (i in 1:N) {  # Loop over spatial units
for (k in 1:t) { # Loop over years
for (j in 1:w) {O_array[i,k,j]<- data$casos[i*k*j]}}}
O_array[1,1,2]
O_array[1,1,1]
# Similarly, flatten the expected number of cases `E`
E_array <- array(NA, dim = c(N, t, w))  # Convert to array form
for (i in 1:N) {  # Loop over spatial units
for (k in 1:t) { # Loop over years
for (j in 1:w) {E_array[i,k,j]<- data$pop[i*k*j]}}}
ListData <- list(
O = O_array,   # observed nb of cases
pop = E_array
)
ListConstant <- list(
N = N,                            # number of area
t = t,                            # number of years
w = w,                            # number of weeks
L = length(bInfo$weights),        # Length
adj = bInfo$adj,                  # adjacencies vector
num = bInfo$num,                  # number of the region
weights = bInfo$weights           # weight
)
ICARCodeExtended <- nimbleCode({
for (i in 1:N) {  # Loop over spatial units
for (k in 1:t) { # Loop over years
for (j in 1:w) {  # Loop over weeks
O[i, k, j] ~ dpois(mu[i, k, j])  # Poisson likelihood for observed counts
log(mu[i, k, j]) <- log(pop[i, k, j]) + alpha + phi[i] + psi[j] + gamma[k]
e[i, k, j] <- (O[i, k, j] - mu[i, k, j]) / sqrt(mu[i, k, j])  # residuals
}
}
SIR[i] <- exp(phi[i])  # area-specific SIR
}
# Spatial random effect (ICAR)
phi[1:N] ~ dcar_normal(adj[1:L], weights[1:L], num[1:N], tau.phi, zero_mean = 1)
# Temporal random effects for months (RW1)
for (j in 2:w) {  # RW1 model for months (starts from 2 to set prior dependency on j-1)
psi[j] ~ dnorm(psi[j-1], tau.psi)
}
psi[1] <- 0 # Identifiability constraint for the first week
# Temporal random effects for years (i.i.d)
for (k in 1:t) {
gamma[k] ~ dnorm(0, tau.gamma) # i.i.d. effect for years
}
# Priors
alpha ~ dflat()                      # vague uniform prior
tau.phi ~ dgamma(1, 0.01)            # precision of the ICAR component
sigma2.phi <- 1 / tau.phi            # variance of the ICAR component
tau.psi ~ dgamma(1, 0.01)            # precision of the RW1 component for months
sigma2.psi <- 1 / tau.psi            # variance of the RW1 component
tau.gamma ~ dgamma(1, 0.01)          # precision of the i.i.d. component for years
sigma2.gamma <- 1 / tau.gamma        # variance of the i.i.d. component
overallSIR <- exp(alpha)
})
inits <- list(
list(alpha = 0.01, tau.phi = 10, phi = rep(0.01, times = N), psi = rep(0, w), gamma = rep(0, t), tau.psi = 10, tau.gamma = 10), # chain 1
list(alpha = 0.5, tau.phi = 1, phi = rep(-0.01, times = N), psi = rep(0, w), gamma = rep(0, t), tau.psi = 1, tau.gamma = 1)     # chain 2
)
params <- c("sigma2.phi", "overallSIR", "SIR", "e", "mu", "alpha", "phi", "psi", "gamma", "sigma2.psi", "sigma2.gamma")
ICARCodesamplesExtended <- nimbleMCMC(
code = ICARCodeExtended,
data = ListData,
constants = ListConstant,
inits = inits,
monitors = params,
niter = 10000,
nburnin = 2000,
thin = 2,
nchains = 2,
setSeed = 9,
progressBar = FALSE,
samplesAsCodaMCMC = TRUE,
summary = TRUE,
WAIC = TRUE
)
RR<-ICARCodesamplesExtended$summary$chain2[paste0("SIR[", 1:28,"]"),"Median"]
shp$RR<-RR
ggplot() + geom_sf(data = shp, aes(fill=RR), col = NA) + ggtitle("Residual SMR") +
scale_fill_viridis_c() + theme_bw() -> p1
p1
plot(shp$inc,shp$RR)
E_array
O_array
View(data)
dim(O_array)
O_array[1,,]
O_array[,,1]
View(data)
#ERROR HERE
O_array <- array(NA, dim = c(N, t, w))  # Convert to array form
for (i in 1:N) {  # Loop over spatial units
for (j in c(41:52,1:40) {O_array[i,k,j]<- data$casos[data$regional_id==i & data$year_id==j & data$week_id==j]}}}
for (i in 1:N) {  # Loop over spatial units
#ERROR HERE
O_array <- array(NA, dim = c(N, t, w))  # Convert to array form
#ERROR HERE
O_array <- array(NA, dim = c(N, t, w))  # Convert to array form
for (i in 1:N) {  # Loop over spatial units
for (k in 1:t) { # Loop over years
for (j in c(41:52,1:40)) { O_array[i,k,j]<- data$casos[data$regional_id==i & data$year_id==j & data$week_id==j]}
}
}
i
data$casos[data$regional_id==i & data$year_id==j & data$week_id==j]
j
data$week_id==j
data[data$regional_id==i & data$year_id==j & data$week_id==j,"casos"]
data$regional_id==i
#ERROR HERE
O_array <- array(NA, dim = c(N, t, w))  # Convert to array form
for (i in 1:N) {  # Loop over spatial units
for (k in 1:t) { # Loop over years
for (j in c(41:52,1:40)) { O_array[i,k,j]<- data[data$regional_id==i & data$year_id==k & data$week_id==j,"casos"]}
}
}
dim(O_array)
O_array[,,1]
O_array[1,,]
glimpse (data)
dim(data)
2912/52
#change identif for weeks
data$week_id<-rep(1:52,56)
#ERRdata#ERROR HERE
O_array <- array(NA, dim = c(N, t, w))  # Convert to array form
#ERRdata#ERROR HERE
O_array <- array(NA, dim = c(N, t, w))  # Convert to array form
for (i in 1:N) {  # Loop over spatial units
for (k in 1:t) { # Loop over years
for (j in 1:j) { O_array[i,k,j]<- data[data$regional_id==i & data$year_id==k & data$week_id==j,"casos"]}
}
}
dim(O_array)
O_array[,,1]
O_array[1,1,1]
O_array[1,1,2]
O_array[1,,]
#ERRdata#ERROR HERE
O_array <- array(NA, dim = c(N, t, w))  # Convert to array form
for (i in 1:N) {  # Loop over spatial units
for (k in 1:t) { # Loop over years
for (j in 1:52) { O_array[i,k,j]<- data[data$regional_id==i & data$year_id==k & data$week_id==j,"casos"]}
}
}
dim(O_array)
O_array[1,,]
# Similarly, flatten the expected number of cases `E`
E_array <- array(NA, dim = c(N, t, w))  # Convert to array form
for (i in 1:N) {  # Loop over spatial units
for (k in 1:t) { # Loop over years
for (j in 1:52) { E_array[i,k,j]<- data[data$regional_id==i & data$year_id==k & data$week_id==j,"pop"]}
}
}
ListData <- list(
O = O_array,   # observed nb of cases
pop = E_array
)
ListConstant <- list(
N = N,                            # number of area
t = t,                            # number of years
w = w,                            # number of weeks
L = length(bInfo$weights),        # Length
adj = bInfo$adj,                  # adjacencies vector
num = bInfo$num,                  # number of the region
weights = bInfo$weights           # weight
)
ICARCodeExtended <- nimbleCode({
for (i in 1:N) {  # Loop over spatial units
for (k in 1:t) { # Loop over years
for (j in 1:w) {  # Loop over weeks
O[i, k, j] ~ dpois(mu[i, k, j])  # Poisson likelihood for observed counts
log(mu[i, k, j]) <- log(pop[i, k, j]) + alpha + phi[i] + psi[j] + gamma[k]
e[i, k, j] <- (O[i, k, j] - mu[i, k, j]) / sqrt(mu[i, k, j])  # residuals
}
}
SIR[i] <- exp(phi[i])  # area-specific SIR
}
# Spatial random effect (ICAR)
phi[1:N] ~ dcar_normal(adj[1:L], weights[1:L], num[1:N], tau.phi, zero_mean = 1)
# Temporal random effects for months (RW1)
for (j in 2:w) {  # RW1 model for months (starts from 2 to set prior dependency on j-1)
psi[j] ~ dnorm(psi[j-1], tau.psi)
}
psi[1] <- 0 # Identifiability constraint for the first week
# Temporal random effects for years (i.i.d)
for (k in 1:t) {
gamma[k] ~ dnorm(0, tau.gamma) # i.i.d. effect for years
}
# Priors
alpha ~ dflat()                      # vague uniform prior
tau.phi ~ dgamma(1, 0.01)            # precision of the ICAR component
sigma2.phi <- 1 / tau.phi            # variance of the ICAR component
tau.psi ~ dgamma(1, 0.01)            # precision of the RW1 component for months
sigma2.psi <- 1 / tau.psi            # variance of the RW1 component
tau.gamma ~ dgamma(1, 0.01)          # precision of the i.i.d. component for years
sigma2.gamma <- 1 / tau.gamma        # variance of the i.i.d. component
overallSIR <- exp(alpha)
})
inits <- list(
list(alpha = 0.01, tau.phi = 10, phi = rep(0.01, times = N), psi = rep(0, w), gamma = rep(0, t), tau.psi = 10, tau.gamma = 10), # chain 1
list(alpha = 0.5, tau.phi = 1, phi = rep(-0.01, times = N), psi = rep(0, w), gamma = rep(0, t), tau.psi = 1, tau.gamma = 1)     # chain 2
)
params <- c("sigma2.phi", "overallSIR", "SIR", "e", "mu", "alpha", "phi", "psi", "gamma", "sigma2.psi", "sigma2.gamma")
ICARCodesamplesExtended <- nimbleMCMC(
code = ICARCodeExtended,
data = ListData,
constants = ListConstant,
inits = inits,
monitors = params,
niter = 10000,
nburnin = 2000,
thin = 2,
nchains = 2,
setSeed = 9,
progressBar = FALSE,
samplesAsCodaMCMC = TRUE,
summary = TRUE,
WAIC = TRUE
)
ICARCodesamplesExtended <- nimbleMCMC(
code = ICARCodeExtended,
data = ListData,
constants = ListConstant,
inits = inits,
monitors = params,
niter = 10000,
nburnin = 2000,
thin = 2,
nchains = 2,
setSeed = 9,
progressBar = FALSE,
samplesAsCodaMCMC = TRUE,
summary = TRUE,
WAIC = TRUE
)
RR<-ICARCodesamplesExtended$summary$chain2[paste0("SIR[", 1:28,"]"),"Median"]
shp$RR<-RR
library(ggplot2)
ggplot() + geom_sf(data = shp, aes(fill=RR), col = NA) + ggtitle("Residual SMR") +
scale_fill_viridis_c() + theme_bw() -> p1
plot(shp$inc/0.0047,shp$RR_inla, ylim=c(0.25,3.5), xlim =c(0.25,3.5))
plot(shp$inc/0.0047,shp$RR, ylim=c(0.25,3.5), xlim =c(0.25,3.5))
p1
plot(shp$RR_inla,shp$RR, ylim=c(0.25,3.5), xlim =c(0.25,3.5))
ggplot() + geom_sf(data = shp, aes(fill=inc/0.0047), col = NA) + ggtitle("Cum InC") +
scale_fill_viridis_c() + theme_bw() -> p2
p2
p1
plot((shp$inc/0.0047),shp$RR, ylim=c(0.25,3.5), xlim =c(0.25,3.5))
ggplot() + geom_sf(data = shp, aes(fill=RR-((shp$inc/0.0047))), col = NA) + ggtitle("Residual SMR") +
scale_fill_viridis_c() + theme_bw() -> p1
p1
## -----------------------------------------
### Source packages, functions and data
## -----------------------------------------
# load packages and functions
source("lsl_interaction_brazil/functions/00_packages.R")
source("lsl_interaction_brazil/functions/00_functions.R")
library(ggplot2)
# read in harmonised data
data <- read.csv("data/analysis_data/monthly_data/monthly_data.csv")
date_start <- min(as.Date(data$date))
date_end <- max(as.Date(data$date))
data_sate <-  data %>% group_by(uf, date) %>%
summarise(casos = sum(casos), pop = sum (pop),
temp = mean(temp_med_m), spi1 = mean(spei1_m),
spei3 = mean (spei3_m), spei6 = mean(spei6_m),
spei12 = mean(spei12_m), nino = mean(nino34_m)) %>%
mutate(date = as.Date(date), inc = (casos/pop) * 100000)
## -----------------------------------------
### Plot time series
## -----------------------------------------
# Time series of dengue by state
# Function to create time series plot
create_time_series_plot <- function(data, y_var, color, title) {
data %>%
ggplot(aes(x = date, y = .data[[y_var]])) +
geom_line(color = color) +
xlab("Time") +
ylab("") +
ggtitle(title) +
scale_x_date(limits = c(date_start, date_end), expand = c(0,0),
date_labels = "%b %Y", date_breaks = "2 years") +
theme_bw() +
theme(axis.text.x = element_text( hjust = 1),
plot.title = element_text(size = 10, hjust = 0.5))
}
# Get the unique values of uf
unique_ufs <- unique(data_sate$uf)
# Loop through each uf and create plots
for (uf in unique_ufs[1:2]) {
data_subset <- data_sate %>% filter(uf == !!uf)
# Create each time series plot
inc_plot <- create_time_series_plot(data_subset, "inc", "purple", "Dengue Incidence")
temp_plot <- create_time_series_plot(data_subset, "temp", "red", "Temperature")
spei6_plot <- create_time_series_plot(data_subset, "spei6", "brown", "SPEI-6")
nino_plot <- create_time_series_plot(data_subset, "nino_year", "darkgreen", "Nino Index")
# Combine the plots using patchwork
combined_plot <- (inc_plot / temp_plot / spei6_plot / nino_plot) +
plot_layout(ncol = 1, heights = c(1, 1, 1, 1)) +  # Adjust heights if necessary
plot_annotation(title = uf,
theme = theme(plot.title = element_text(size = 20, hjust = 0.52)))
# Display the combined plot (adjust height of the combined plot as necessary)
print(combined_plot)
}
data_subset <- data_sate %>% filter(uf == !!uf)
# Create each time series plot
inc_plot <- create_time_series_plot(data_subset, "inc", "purple", "Dengue Incidence")
temp_plot <- create_time_series_plot(data_subset, "temp", "red", "Temperature")
spei6_plot <- create_time_series_plot(data_subset, "spei6", "brown", "SPEI-6")
nino_plot <- create_time_series_plot(data_subset, "nino_year", "darkgreen", "Nino Index")
# Combine the plots using patchwork
combined_plot <- (inc_plot / temp_plot / spei6_plot / nino_plot) +
plot_layout(ncol = 1, heights = c(1, 1, 1, 1)) +  # Adjust heights if necessary
plot_annotation(title = uf,
theme = theme(plot.title = element_text(size = 20, hjust = 0.52)))
# Display the combined plot (adjust height of the combined plot as necessary)
print(combined_plot)
# Loop through each uf and create plots
for (uf in unique_ufs[1:2]) {
data_subset <- data_sate %>% filter(uf == !!uf)
# Create each time series plot
inc_plot <- create_time_series_plot(data_subset, "inc", "purple", "Dengue Incidence")
temp_plot <- create_time_series_plot(data_subset, "temp", "red", "Temperature")
spei6_plot <- create_time_series_plot(data_subset, "spei6", "brown", "SPEI-6")
nino_plot <- create_time_series_plot(data_subset, "nino34_m", "darkgreen", "Nino Index")
# Combine the plots using patchwork
combined_plot <- (inc_plot / temp_plot / spei6_plot / nino_plot) +
plot_layout(ncol = 1, heights = c(1, 1, 1, 1)) +  # Adjust heights if necessary
plot_annotation(title = uf,
theme = theme(plot.title = element_text(size = 20, hjust = 0.52)))
# Display the combined plot (adjust height of the combined plot as necessary)
print(combined_plot)
}
data_subset
# Loop through each uf and create plots
for (uf in unique_ufs[1:2]) {
data_subset <- data_sate %>% filter(uf == !!uf)
# Create each time series plot
inc_plot <- create_time_series_plot(data_subset, "inc", "purple", "Dengue Incidence")
temp_plot <- create_time_series_plot(data_subset, "temp", "red", "Temperature")
spei6_plot <- create_time_series_plot(data_subset, "spei6", "brown", "SPEI-6")
nino_plot <- create_time_series_plot(data_subset, "nino", "darkgreen", "Nino Index")
# Combine the plots using patchwork
combined_plot <- (inc_plot / temp_plot / spei6_plot / nino_plot) +
plot_layout(ncol = 1, heights = c(1, 1, 1, 1)) +  # Adjust heights if necessary
plot_annotation(title = uf,
theme = theme(plot.title = element_text(size = 20, hjust = 0.52)))
# Display the combined plot (adjust height of the combined plot as necessary)
print(combined_plot)
}
## -----------------------------------------
### Plot time series
## -----------------------------------------
# Time series of dengue by state
# Function to create time series plot
create_time_series_plot <- function(data, y_var, color, title) {
data %>%
ggplot(aes(x = date, y = .data[[y_var]])) +
geom_line(color = color) +
xlab("Time") +
ylab("") +
ggtitle(title) +
scale_x_date(limits = c(date_start, date_end), expand = c(0,0),
date_labels = "%b %Y", date_breaks = "2 years") +
theme_bw() +
theme(axis.text.x = element_text( hjust = 1),
plot.title = element_text(size = 10, hjust = 0.5))
}
# Loop through each uf and create plots
for (uf in unique_ufs[1:2]) {
data_subset <- data_sate %>% filter(uf == !!uf)
# Create each time series plot
inc_plot <- create_time_series_plot(data_subset, "inc", "purple", "Dengue Incidence")
temp_plot <- create_time_series_plot(data_subset, "temp", "red", "Temperature")
spei6_plot <- create_time_series_plot(data_subset, "spei12", "brown", "SPEI-12")
nino_plot <- create_time_series_plot(data_subset, "spei1", "darkgreen", "SPEI-1")
# Combine the plots using patchwork
combined_plot <- (inc_plot / temp_plot / spei6_plot / nino_plot) +
plot_layout(ncol = 1, heights = c(1, 1, 1, 1)) +  # Adjust heights if necessary
plot_annotation(title = uf,
theme = theme(plot.title = element_text(size = 20, hjust = 0.52)))
# Display the combined plot (adjust height of the combined plot as necessary)
print(combined_plot)
}
data_sate <-  data %>% group_by(uf, date) %>%
summarise(casos = sum(casos), pop = sum (pop),
temp = mean(temp_med_m), spei1 = mean(spei1_m),
spei3 = mean (spei3_m), spei6 = mean(spei6_m),
spei12 = mean(spei12_m), nino = mean(nino34_m)) %>%
mutate(date = as.Date(date), inc = (casos/pop) * 100000)
## -----------------------------------------
### Plot time series
## -----------------------------------------
# Time series of dengue by state
# Function to create time series plot
create_time_series_plot <- function(data, y_var, color, title) {
data %>%
ggplot(aes(x = date, y = .data[[y_var]])) +
geom_line(color = color) +
xlab("Time") +
ylab("") +
ggtitle(title) +
scale_x_date(limits = c(date_start, date_end), expand = c(0,0),
date_labels = "%b %Y", date_breaks = "2 years") +
theme_bw() +
theme(axis.text.x = element_text( hjust = 1),
plot.title = element_text(size = 10, hjust = 0.5))
}
# Get the unique values of uf
unique_ufs <- unique(data_sate$uf)
# Loop through each uf and create plots
for (uf in unique_ufs[1:2]) {
data_subset <- data_sate %>% filter(uf == !!uf)
# Create each time series plot
inc_plot <- create_time_series_plot(data_subset, "inc", "purple", "Dengue Incidence")
temp_plot <- create_time_series_plot(data_subset, "temp", "red", "Temperature")
spei6_plot <- create_time_series_plot(data_subset, "spei12", "brown", "SPEI-12")
nino_plot <- create_time_series_plot(data_subset, "spei1", "darkgreen", "SPEI-1")
# Combine the plots using patchwork
combined_plot <- (inc_plot / temp_plot / spei6_plot / nino_plot) +
plot_layout(ncol = 1, heights = c(1, 1, 1, 1)) +  # Adjust heights if necessary
plot_annotation(title = uf,
theme = theme(plot.title = element_text(size = 20, hjust = 0.52)))
# Display the combined plot (adjust height of the combined plot as necessary)
print(combined_plot)
}
# Get the unique values of uf
unique_ufs <- unique(data_sate$uf)
# Loop through each uf and create plots
for (uf in unique_ufs) {
data_subset <- data_sate %>% filter(uf == !!uf)
# Create each time series plot
inc_plot <- create_time_series_plot(data_subset, "inc", "purple", "Dengue Incidence")
temp_plot <- create_time_series_plot(data_subset, "temp", "red", "Temperature")
spei6_plot <- create_time_series_plot(data_subset, "spei12", "brown", "SPEI-12")
nino_plot <- create_time_series_plot(data_subset, "spei1", "darkgreen", "SPEI-1")
# Combine the plots using patchwork
combined_plot <- (inc_plot / temp_plot / spei6_plot / nino_plot) +
plot_layout(ncol = 1, heights = c(1, 1, 1, 1)) +  # Adjust heights if necessary
plot_annotation(title = uf,
theme = theme(plot.title = element_text(size = 20, hjust = 0.52)))
# Display the combined plot (adjust height of the combined plot as necessary)
print(combined_plot)
}
