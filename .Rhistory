tau.psi ~ dgamma(1, 0.01)            # precision of the RW1 component for months
sigma2.psi <- 1 / tau.psi            # variance of the RW1 component
tau.gamma ~ dgamma(1, 0.01)          # precision of the i.i.d. component for years
sigma2.gamma <- 1 / tau.gamma        # variance of the i.i.d. component
overallSIR <- exp(alpha)
})
inits <- list(
list(alpha = 0.01, tau.phi = 10, phi = rep(0.01, times = N), psi = rep(0, w), gamma = rep(0, t), tau.psi = 10, tau.gamma = 10), # chain 1
list(alpha = 0.5, tau.phi = 1, phi = rep(-0.01, times = N), psi = rep(0, w), gamma = rep(0, t), tau.psi = 1, tau.gamma = 1)     # chain 2
)
params <- c("sigma2.phi", "overallSIR", "SIR", "e", "mu", "alpha", "phi", "psi", "gamma", "sigma2.psi", "sigma2.gamma")
ICARCodesamplesExtended <- nimbleMCMC(
code = ICARCodeExtended,
data = ListData,
constants = ListConstant,
inits = inits,
monitors = params,
niter = 10000,
nburnin = 2000,
thin = 2,
nchains = 2,
setSeed = 9,
progressBar = FALSE,
samplesAsCodaMCMC = TRUE,
summary = TRUE,
WAIC = TRUE
)
ICARCodesamplesExtended <- nimbleMCMC(
code = ICARCodeExtended,
data = ListData,
constants = ListConstant,
inits = inits,
monitors = params,
niter = 10000,
nburnin = 2000,
thin = 2,
nchains = 2,
setSeed = 9,
progressBar = FALSE,
samplesAsCodaMCMC = TRUE,
summary = TRUE,
WAIC = TRUE
)
RR<-ICARCodesamplesExtended$summary$chain2[paste0("SIR[", 1:28,"]"),"Median"]
shp$RR<-RR
library(ggplot2)
ggplot() + geom_sf(data = shp, aes(fill=RR), col = NA) + ggtitle("Residual SMR") +
scale_fill_viridis_c() + theme_bw() -> p1
plot(shp$inc/0.0047,shp$RR_inla, ylim=c(0.25,3.5), xlim =c(0.25,3.5))
plot(shp$inc/0.0047,shp$RR, ylim=c(0.25,3.5), xlim =c(0.25,3.5))
p1
plot(shp$RR_inla,shp$RR, ylim=c(0.25,3.5), xlim =c(0.25,3.5))
ggplot() + geom_sf(data = shp, aes(fill=inc/0.0047), col = NA) + ggtitle("Cum InC") +
scale_fill_viridis_c() + theme_bw() -> p2
p2
p1
plot((shp$inc/0.0047),shp$RR, ylim=c(0.25,3.5), xlim =c(0.25,3.5))
ggplot() + geom_sf(data = shp, aes(fill=RR-((shp$inc/0.0047))), col = NA) + ggtitle("Residual SMR") +
scale_fill_viridis_c() + theme_bw() -> p1
p1
## -----------------------------------------
### Source packages, functions and data
## -----------------------------------------
# load packages and functions
source("lsl_interaction_brazil/functions/00_packages.R")
source("lsl_interaction_brazil/functions/00_functions.R")
library(ggplot2)
# read in harmonised data
data <- read.csv("data/analysis_data/monthly_data/monthly_data.csv")
date_start <- min(as.Date(data$date))
date_end <- max(as.Date(data$date))
data_sate <-  data %>% group_by(uf, date) %>%
summarise(casos = sum(casos), pop = sum (pop),
temp = mean(temp_med_m), spi1 = mean(spei1_m),
spei3 = mean (spei3_m), spei6 = mean(spei6_m),
spei12 = mean(spei12_m), nino = mean(nino34_m)) %>%
mutate(date = as.Date(date), inc = (casos/pop) * 100000)
## -----------------------------------------
### Plot time series
## -----------------------------------------
# Time series of dengue by state
# Function to create time series plot
create_time_series_plot <- function(data, y_var, color, title) {
data %>%
ggplot(aes(x = date, y = .data[[y_var]])) +
geom_line(color = color) +
xlab("Time") +
ylab("") +
ggtitle(title) +
scale_x_date(limits = c(date_start, date_end), expand = c(0,0),
date_labels = "%b %Y", date_breaks = "2 years") +
theme_bw() +
theme(axis.text.x = element_text( hjust = 1),
plot.title = element_text(size = 10, hjust = 0.5))
}
# Get the unique values of uf
unique_ufs <- unique(data_sate$uf)
# Loop through each uf and create plots
for (uf in unique_ufs[1:2]) {
data_subset <- data_sate %>% filter(uf == !!uf)
# Create each time series plot
inc_plot <- create_time_series_plot(data_subset, "inc", "purple", "Dengue Incidence")
temp_plot <- create_time_series_plot(data_subset, "temp", "red", "Temperature")
spei6_plot <- create_time_series_plot(data_subset, "spei6", "brown", "SPEI-6")
nino_plot <- create_time_series_plot(data_subset, "nino_year", "darkgreen", "Nino Index")
# Combine the plots using patchwork
combined_plot <- (inc_plot / temp_plot / spei6_plot / nino_plot) +
plot_layout(ncol = 1, heights = c(1, 1, 1, 1)) +  # Adjust heights if necessary
plot_annotation(title = uf,
theme = theme(plot.title = element_text(size = 20, hjust = 0.52)))
# Display the combined plot (adjust height of the combined plot as necessary)
print(combined_plot)
}
data_subset <- data_sate %>% filter(uf == !!uf)
# Create each time series plot
inc_plot <- create_time_series_plot(data_subset, "inc", "purple", "Dengue Incidence")
temp_plot <- create_time_series_plot(data_subset, "temp", "red", "Temperature")
spei6_plot <- create_time_series_plot(data_subset, "spei6", "brown", "SPEI-6")
nino_plot <- create_time_series_plot(data_subset, "nino_year", "darkgreen", "Nino Index")
# Combine the plots using patchwork
combined_plot <- (inc_plot / temp_plot / spei6_plot / nino_plot) +
plot_layout(ncol = 1, heights = c(1, 1, 1, 1)) +  # Adjust heights if necessary
plot_annotation(title = uf,
theme = theme(plot.title = element_text(size = 20, hjust = 0.52)))
# Display the combined plot (adjust height of the combined plot as necessary)
print(combined_plot)
# Loop through each uf and create plots
for (uf in unique_ufs[1:2]) {
data_subset <- data_sate %>% filter(uf == !!uf)
# Create each time series plot
inc_plot <- create_time_series_plot(data_subset, "inc", "purple", "Dengue Incidence")
temp_plot <- create_time_series_plot(data_subset, "temp", "red", "Temperature")
spei6_plot <- create_time_series_plot(data_subset, "spei6", "brown", "SPEI-6")
nino_plot <- create_time_series_plot(data_subset, "nino34_m", "darkgreen", "Nino Index")
# Combine the plots using patchwork
combined_plot <- (inc_plot / temp_plot / spei6_plot / nino_plot) +
plot_layout(ncol = 1, heights = c(1, 1, 1, 1)) +  # Adjust heights if necessary
plot_annotation(title = uf,
theme = theme(plot.title = element_text(size = 20, hjust = 0.52)))
# Display the combined plot (adjust height of the combined plot as necessary)
print(combined_plot)
}
data_subset
# Loop through each uf and create plots
for (uf in unique_ufs[1:2]) {
data_subset <- data_sate %>% filter(uf == !!uf)
# Create each time series plot
inc_plot <- create_time_series_plot(data_subset, "inc", "purple", "Dengue Incidence")
temp_plot <- create_time_series_plot(data_subset, "temp", "red", "Temperature")
spei6_plot <- create_time_series_plot(data_subset, "spei6", "brown", "SPEI-6")
nino_plot <- create_time_series_plot(data_subset, "nino", "darkgreen", "Nino Index")
# Combine the plots using patchwork
combined_plot <- (inc_plot / temp_plot / spei6_plot / nino_plot) +
plot_layout(ncol = 1, heights = c(1, 1, 1, 1)) +  # Adjust heights if necessary
plot_annotation(title = uf,
theme = theme(plot.title = element_text(size = 20, hjust = 0.52)))
# Display the combined plot (adjust height of the combined plot as necessary)
print(combined_plot)
}
## -----------------------------------------
### Plot time series
## -----------------------------------------
# Time series of dengue by state
# Function to create time series plot
create_time_series_plot <- function(data, y_var, color, title) {
data %>%
ggplot(aes(x = date, y = .data[[y_var]])) +
geom_line(color = color) +
xlab("Time") +
ylab("") +
ggtitle(title) +
scale_x_date(limits = c(date_start, date_end), expand = c(0,0),
date_labels = "%b %Y", date_breaks = "2 years") +
theme_bw() +
theme(axis.text.x = element_text( hjust = 1),
plot.title = element_text(size = 10, hjust = 0.5))
}
# Loop through each uf and create plots
for (uf in unique_ufs[1:2]) {
data_subset <- data_sate %>% filter(uf == !!uf)
# Create each time series plot
inc_plot <- create_time_series_plot(data_subset, "inc", "purple", "Dengue Incidence")
temp_plot <- create_time_series_plot(data_subset, "temp", "red", "Temperature")
spei6_plot <- create_time_series_plot(data_subset, "spei12", "brown", "SPEI-12")
nino_plot <- create_time_series_plot(data_subset, "spei1", "darkgreen", "SPEI-1")
# Combine the plots using patchwork
combined_plot <- (inc_plot / temp_plot / spei6_plot / nino_plot) +
plot_layout(ncol = 1, heights = c(1, 1, 1, 1)) +  # Adjust heights if necessary
plot_annotation(title = uf,
theme = theme(plot.title = element_text(size = 20, hjust = 0.52)))
# Display the combined plot (adjust height of the combined plot as necessary)
print(combined_plot)
}
data_sate <-  data %>% group_by(uf, date) %>%
summarise(casos = sum(casos), pop = sum (pop),
temp = mean(temp_med_m), spei1 = mean(spei1_m),
spei3 = mean (spei3_m), spei6 = mean(spei6_m),
spei12 = mean(spei12_m), nino = mean(nino34_m)) %>%
mutate(date = as.Date(date), inc = (casos/pop) * 100000)
## -----------------------------------------
### Plot time series
## -----------------------------------------
# Time series of dengue by state
# Function to create time series plot
create_time_series_plot <- function(data, y_var, color, title) {
data %>%
ggplot(aes(x = date, y = .data[[y_var]])) +
geom_line(color = color) +
xlab("Time") +
ylab("") +
ggtitle(title) +
scale_x_date(limits = c(date_start, date_end), expand = c(0,0),
date_labels = "%b %Y", date_breaks = "2 years") +
theme_bw() +
theme(axis.text.x = element_text( hjust = 1),
plot.title = element_text(size = 10, hjust = 0.5))
}
# Get the unique values of uf
unique_ufs <- unique(data_sate$uf)
# Loop through each uf and create plots
for (uf in unique_ufs[1:2]) {
data_subset <- data_sate %>% filter(uf == !!uf)
# Create each time series plot
inc_plot <- create_time_series_plot(data_subset, "inc", "purple", "Dengue Incidence")
temp_plot <- create_time_series_plot(data_subset, "temp", "red", "Temperature")
spei6_plot <- create_time_series_plot(data_subset, "spei12", "brown", "SPEI-12")
nino_plot <- create_time_series_plot(data_subset, "spei1", "darkgreen", "SPEI-1")
# Combine the plots using patchwork
combined_plot <- (inc_plot / temp_plot / spei6_plot / nino_plot) +
plot_layout(ncol = 1, heights = c(1, 1, 1, 1)) +  # Adjust heights if necessary
plot_annotation(title = uf,
theme = theme(plot.title = element_text(size = 20, hjust = 0.52)))
# Display the combined plot (adjust height of the combined plot as necessary)
print(combined_plot)
}
# Get the unique values of uf
unique_ufs <- unique(data_sate$uf)
# Loop through each uf and create plots
for (uf in unique_ufs) {
data_subset <- data_sate %>% filter(uf == !!uf)
# Create each time series plot
inc_plot <- create_time_series_plot(data_subset, "inc", "purple", "Dengue Incidence")
temp_plot <- create_time_series_plot(data_subset, "temp", "red", "Temperature")
spei6_plot <- create_time_series_plot(data_subset, "spei12", "brown", "SPEI-12")
nino_plot <- create_time_series_plot(data_subset, "spei1", "darkgreen", "SPEI-1")
# Combine the plots using patchwork
combined_plot <- (inc_plot / temp_plot / spei6_plot / nino_plot) +
plot_layout(ncol = 1, heights = c(1, 1, 1, 1)) +  # Adjust heights if necessary
plot_annotation(title = uf,
theme = theme(plot.title = element_text(size = 20, hjust = 0.52)))
# Display the combined plot (adjust height of the combined plot as necessary)
print(combined_plot)
}
# load packages
packages <- c("dplyr", "stringr", "INLA", "GHRmodel")
lapply(packages, library, character.only = TRUE)
# ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
# Random effects ============================================================
#
# Description:
#     Fit random effect models for selection
#
# Script authors:
#     Carles Milà  (carles.milagarcia@bsc.es)
#     Chloe Fletcher  (chloe.fletcher@bsc.es)
#
# Env:
#   * Debug: Local
#   * Run: MN5
# ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
# 0. Setup ----
# load packages
library("dplyr")
library("INLA")
library("spdep")
library("GHRmodel")
library("GHRpredict")
# read data, keep relevant columns for RE estimation
data <- read.csv("data/processed/weekly_data.csv")
data <- dplyr::select(data,
-starts_with("tas"), -starts_with("prlr"),
-starts_with("spi"), -starts_with("spei"),
-starts_with("nino"), -starts_with("oni")) |>
mutate(date = as.Date(date))
# To delete
data <- data[data$year >= 2019,]
# 1. Formulas, priors and graph ----
# Formulas
source("R/00_RE_formulas.R")
# Priors
precision.prior <- list(prec = list(prior = "pc.prec", param = c(0.5, 0.01)))
precision.prior2 <- list(prec = list(prior = "pc.prec", param = c(0.25, 0.01)))
# Graph
g <- readRDS("data/processed/graph.rds")
formulas <- paste0("casos ~ 1 + ", all_s[1])
names(formulas) <- names(all_s[1])
# Convert to GHR formulas
GHRformulas <- as_GHRformulas(formulas)
mod_names <- names(formulas)
# Create a folder in the specified path with the name of interest
if(length(formulas == 1) & isTRUE(create_folder)){
dir.create(paste0(path, mod_names))
}
# Validation 01
data01 <- data[data$dataset_01!="Out",]
limit01 <- max(data01[data01$dataset_01 == "Train", "date"])
names(data01)
mod_01 <- ghr_predict(formulas = GHRformulas,
data = data01,
family = "nbinomial",
offset = "pop",
cv_strategy = "expanding-window",
control_strategy = list(fixed_proportion = 1,
fixed_until = limit01))
GHRformulas
mod_01 <- ghr_predict(formula = GHRformulas,
data = data01,
family = "nbinomial",
offset = "pop",
cv_strategy = "expanding-window",
control_strategy = list(fixed_proportion = 1,
fixed_until = limit01))
mod_01 <- ghr_predict(formula = GHRformulas,
data = data01,
family = "nbinomial",
offset = "pop",
control_strategy = list(fixed_proportion = 1,
fixed_until = limit01))
# Convert to GHR formulas
GHRformulas <- as_GHRformulas(formulas)
mod_names <- names(formulas)
GHRformulas
mod_01 <- ghr_predict(formula = GHRformulas,
data = data01,
family = "nbinomial",
offset = "pop",
control_strategy = list(fixed_proportion = 1,
fixed_until = limit01))
class(GHRformulas)
class(GHRformulas)
mod_01 <- ghr_predict(formula = GHRformulas,
data = data01,
family = "nbinomial",
offset = "pop",
control_strategy = list(fixed_proportion = 1,
fixed_until = limit01))
GHRformulas
class(GHRformulas)
GHRformulas
mod_01 <- ghr_predict(formula = GHRformulas,
data = data01,
family = "nbinomial",
offset = "pop",
control_strategy = list(fixed_until = limit01))
GHRformulas
?ghr_predict
# 0. Setup ----
# load packages
library("dplyr")
library("INLA")
library("spdep")
library("GHRmodel")
library("GHRpredict")
# read data, keep relevant columns for RE estimation
data <- read.csv("data/processed/weekly_data.csv")
data <- dplyr::select(data,
-starts_with("tas"), -starts_with("prlr"),
-starts_with("spi"), -starts_with("spei"),
-starts_with("nino"), -starts_with("oni")) |>
mutate(date = as.Date(date))
# To delete
data <- data[data$year >= 2022,]
# 1. Formulas, priors and graph ----
# Formulas
source("R/00_RE_formulas.R")
# Priors
precision.prior <- list(prec = list(prior = "pc.prec", param = c(0.5, 0.01)))
precision.prior2 <- list(prec = list(prior = "pc.prec", param = c(0.25, 0.01)))
# Graph
g <- readRDS("data/processed/graph.rds")
# 2. Fit model ----
formulas <- paste0("casos ~ 1 + ", all_s[1])
names(formulas) <- names(all_s[1])
# Convert to GHR formulas
GHRformulas <- as_GHRformulas(formulas)
mod_names <- names(formulas)
# Create a folder in the specified path with the name of interest
if(length(formulas == 1) & isTRUE(create_folder)){
dir.create(paste0(path, mod_names))
}
# Convert to GHR formulas
GHRformulas <- as_GHRformulas(formulas)
mod_names <- names(formulas)
# Create a folder in the specified path with the name of interest
if(length(formulas == 1) & isTRUE(create_dir)){
dir.create(paste0(path, mod_names))
}
create_dir <- FALSE
# Create a folder in the specified path with the name of interest
if(length(formulas == 1) & isTRUE(create_dir)){
dir.create(paste0(path, mod_names))
}
# Fit model for the whole period, store it as rds. Store GOF metrics as csv.
mod_all <- fit_models(formulas = GHRformulas,
data = data,
family = "nbinomial",
name = mod_names,
offset = "pop",
control_compute = list(config = TRUE, vcov = FALSE))
mod_all$mod_gof
# read data, keep relevant columns for RE estimation
data <- read.csv("data/processed/weekly_data.csv")
data <- dplyr::select(data,
-starts_with("tas"), -starts_with("prlr"),
-starts_with("spi"), -starts_with("spei"),
-starts_with("nino"), -starts_with("oni")) |>
mutate(date = as.Date(date))
nrow(data)*1000
nrow(data)
?GHRpredict::ghr_predict
# load packages
library("dplyr")
library("INLA")
library("spdep")
library("GHRmodel")
library("GHRpredict")
# read data, keep relevant columns for RE estimation
data <- read.csv("data/processed/weekly_data.csv")
# read data, keep relevant columns for RE estimation
data <- read.csv("data/processed/weekly_data.csv")
data <- dplyr::select(data,
-starts_with("tas"), -starts_with("prlr"),
-starts_with("spi"), -starts_with("spei"),
-starts_with("nino"), -starts_with("oni")) |>
mutate(date = as.Date(date))
# To delete
data <- data[data$year >= 2019,]
# 1. Formulas, priors and graph ----
# Formulas
source("R/00_RE_formulas.R")
# Priors
precision.prior <- list(prec = list(prior = "pc.prec", param = c(0.5, 0.01)))
precision.prior2 <- list(prec = list(prior = "pc.prec", param = c(0.25, 0.01)))
# Graph
g <- readRDS("data/processed/graph.rds")
formulas <- paste0("casos ~ 1 + ", all_s[1])
names(formulas) <- names(all_s[1])
# Convert to GHR formulas
GHRformulas <- as_GHRformulas(formulas)
mod_names <- names(formulas)
# Validation 01
data01 <- data[data$dataset_01!="Out",]
limit01 <- max(data01[data01$dataset_01 == "Train", "date"])
mod_01 <- ghr_predict(formula = GHRformulas,
data = data01,
family = "nbinomial",
offset = "pop",
control_strategy = list(fixed_until = limit01))
ghr_predict
# ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
# Random effects ============================================================
#
# Description:
#     Fit random effect models for selection
#
# Script authors:
#     Carles Milà  (carles.milagarcia@bsc.es)
#     Chloe Fletcher  (chloe.fletcher@bsc.es)
#
# Env:
#   * Debug: Local
#   * Run: MN5
# ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
# 0. Setup ----
# load packages
library("dplyr")
library("INLA")
library("spdep")
library("GHRmodel")
library("GHRpredict")
# read data, keep relevant columns for RE estimation
data <- read.csv("data/processed/weekly_data.csv")
data <- dplyr::select(data,
-starts_with("tas"), -starts_with("prlr"),
-starts_with("spi"), -starts_with("spei"),
-starts_with("nino"), -starts_with("oni")) |>
mutate(date = as.Date(date))
# To delete
data <- data[data$year >= 2019,]
# 1. Formulas, priors and graph ----
# Formulas
source("R/00_RE_formulas.R")
# Priors
precision.prior <- list(prec = list(prior = "pc.prec", param = c(0.5, 0.01)))
precision.prior2 <- list(prec = list(prior = "pc.prec", param = c(0.25, 0.01)))
# Graph
g <- readRDS("data/processed/graph.rds")
# 2. Fit model ----
formulas <- paste0("casos ~ 1 + ", all_s[1])
names(formulas) <- names(all_s[1])
# Convert to GHR formulas
GHRformulas <- as_GHRformulas(formulas)
mod_names <- names(formulas)
# Validation 01
data01 <- data[data$dataset_01!="Out",]
limit01 <- max(data01[data01$dataset_01 == "Train", "date"])
limit01
mod_01 <- ghr_predict(formula = GHRformulas,
data = data01,
family = "nbinomial",
offset = "pop",
control_strategy = list(fixed_until = limit01))
